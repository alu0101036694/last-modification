node src/types/app.js add --user "edusegre" --id 1 --name "Classic Sonic" --desc "The best Sonic Funko ever" --type "Pop!" --genre "Games" --franchise "A" --number 1 --exclusive 0 --special "B" --value 3

GITHUB

git init
git add .
git commit -m "Guardando express funcionando"
git remote add origin https://github.com/ULL-ESIT-INF-DSI-2223/ull-esit-inf-dsi-22-23-prct11-http-express-funko-app-alu0101036694.git
git branch -M main (cambiar nombre a una rama, en este caso a la por defecto, master)
git push -u origin main

Mirar github asociado: git remote show origin  ó  git remote -v
Cambiar github asociado: git remote set-url name/origin

Ej: 
git remote set-url --add origin git@github.com:alu0101036694/last-modification.git
git remote set-url --delete origin git@github.com:alu0101036694/ull-esit-inf-dsi-22-23-prct11-http-express-funko-app-alu0101036694.git


TYPESCRIPT, JAVASCRIPT, NODE.JS

tsc (Compilar typescript)

Comandos para configurar un directorio desde cero:

npm init --yes (en la carpeta del proyecto, crea package.json)
npm install --global typescript (instala el compilador)
tsc --init (crea tsconfig.json)

Modificar ficheros de configuración: package.json (A) y tsconfig.json (B)

(A)

{
  "name": "theory-examples",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "start": "tsc-watch --onSuccess \"node dist/index.js\""
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "tsc-watch": "^6.0.0"
  }
} 

(B)

{
  "compilerOptions": {
    "target": "es2022",
    "module": "commonjs",
    "rootDir": "./src",
    "outDir": "./dist"
  }
}


ESLINT Y PRETTIER

Ejecutar linter: eslint .
Formatear código con Prettier: npx prettier --write .

Ficheros de configuración ESLint y Prettier: .eslintrc.json, .prettierrc.json, .eslintignore, .prettierignore

TYPEDOC

npm install --save-dev typedoc
Creamos archivo typedoc.json y añadimos los archivos ts que tenemos:

{
    "entryPoints": [
      "./src/programa1.ts",
      "./src/programa2.ts"
    ],
    "out": "./tdocs"
  }

Anotaciones: /** */  (pulsamos enter en el patrón o al lado de la funcion y se genera la documentación)
Podemos usar markdown dentro de las anotaciones: __texto__ (negrita), _texto_ (cursiva), '''codigo''' (snippets de código)

Generar documentación con typedoc: npm run doc

Para ver la página web: Click derecho en index.html y "Open with Live Server"

MOCHA Y CHAI

npm install --save-dev mocha chai @types/mocha @types/chai ts-node